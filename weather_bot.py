import requests
import datetime
import dateparser
import re

from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

TELEGRAM_TOKEN = "7047947994:AAGqnklImKWS-fAmamMHe_ym3w3WfW_TSx4"
OPENWEATHER_API_KEY = "b22d4ca7ac9bdb012661cc54af5ec7b2"

CITY_CORRECTIONS = {
    "–º–æ—Å–∫–≤–µ": "–º–æ—Å–∫–≤–∞",
    "–∞—Å—Ç–∞–Ω–µ": "–∞—Å—Ç–∞–Ω–∞",
    "–∞–ª–º–∞—Ç—ã": "–∞–ª–º–∞—Ç—ã",
    "—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥–µ": "—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥",
    "–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–µ": "–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫",
    "–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ": "–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
    "–æ–º—Å–∫–µ": "–æ–º—Å–∫",
    "—Ç–±–∏–ª–∏—Å–∏": "—Ç–±–∏–ª–∏—Å–∏",
}

def normalize_city(city: str) -> str:
    city = city.strip().lower()
    if city in CITY_CORRECTIONS:
        return CITY_CORRECTIONS[city]
    if city.endswith(("–µ", "–∏", "—É", "—é")) and len(city) > 4:
        city = city[:-1]
    return city

def get_weather(city: str, target_time: datetime.datetime):
    url = f"https://api.openweathermap.org/data/2.5/forecast?q={city}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
    r = requests.get(url)
    if r.status_code != 200:
        return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city}'. üòÖ"

    data = r.json()
    if data.get("cod") != "200":
        return f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥ '{city}'."

    forecasts = data.get("list", [])
    if not forecasts:
        return "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."

    best = min(forecasts, key=lambda x: abs(datetime.datetime.fromtimestamp(x["dt"]) - target_time))
    temp = best["main"]["temp"]
    desc = best["weather"][0]["description"]
    time_txt = datetime.datetime.fromtimestamp(best["dt"]).strftime("%d.%m %H:%M")

    return f"{city.title()} ‚Äî –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {time_txt}: {temp:.1f}¬∞C, {desc}"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üå¶ –ù–∞–ø–∏—à–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ –ö–∞–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞–≤—Ç—Ä–∞ –≤ –ú–æ—Å–∫–≤–µ?\n"
        "‚Ä¢ –ü–æ–≥–æ–¥–∞ —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞ –≤ –ê—Å—Ç–∞–Ω–µ?\n"
        "‚Ä¢ –ß—Ç–æ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –≤ –ê–ª–º–∞—Ç—ã?"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()

    match = re.search(r"(?:–≤|–≤–æ)\s+([–∞-—è—ëa-z\-\s]+)", text)
    city = match.group(1).strip() if match else "–ê–ª–º–∞—Ç—ã"
    city = normalize_city(city)

    parsed_time = dateparser.parse(text, languages=["ru"], settings={"PREFER_DATES_FROM": "future"})
    if not parsed_time:
        parsed_time = datetime.datetime.now() + datetime.timedelta(hours=3)
        note = "–ù–µ –ø–æ–Ω—è–ª, –Ω–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞—é –±–ª–∏–∂–∞–π—à–∏–µ 3 —á–∞—Å–∞.\n"
    else:
        note = ""

    try:
        weather = get_weather(city, parsed_time)
    except Exception as e:
        weather = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}"

    await update.message.reply_text(note + weather)

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ú–æ–∂–Ω–æ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–ö–∞–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞–≤—Ç—Ä–∞ –≤ –ú–æ—Å–∫–≤–µ?'")
    app.run_polling()

if __name__ == "__main__":
    main()